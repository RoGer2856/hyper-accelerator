use hyper::http::HeaderValue;

pub enum ContentType {
    AudioAac,
    AudioMidi,
    AudioMp3,
    AudioOgg,
    AudioOpus,
    AudioWav,
    AudioWeba,
    ApplicationBz,
    ApplicationBz2,
    ApplicationDoc,
    ApplicationDocx,
    ApplicationEpub,
    ApplicationGzip,
    ApplicationJar,
    ApplicationJson,
    ApplicationOctetstream,
    ApplicationOdp,
    ApplicationOds,
    ApplicationOdt,
    ApplicationPdf,
    ApplicationPhp,
    ApplicationPpt,
    ApplicationPptx,
    ApplicationRar,
    ApplicationRtf,
    ApplicationSh,
    ApplicationTar,
    ApplicationXml,
    ApplicationXls,
    ApplicationXlsx,
    ApplicationZip,
    Application7zip,
    FontOtf,
    FontTtf,
    FontWoff,
    FontWoff2,
    ImageAvif,
    ImageBmp,
    ImageGif,
    ImageIco,
    ImageJpeg,
    ImagePng,
    ImageSvg,
    ImageTiff,
    ImageWebp,
    TextCalendar,
    TextCss,
    TextCsv,
    TextHtml,
    TextJavascript,
    TextPlain,
    VideoAvi,
    VideoMp4,
    VideoMpeg,
    VideoOgv,
    VideoTransportStream,
    VideoWebm,
}

impl From<ContentType> for HeaderValue {
    fn from(value: ContentType) -> Self {
        HeaderValue::from_static(value.into())
    }
}

impl From<ContentType> for &'static str {
    fn from(value: ContentType) -> Self {
        match value {
            ContentType::AudioAac => "audio/aac",
            ContentType::AudioMidi => "audio/midi",
            ContentType::AudioMp3 => "audio/mpeg",
            ContentType::AudioOgg => "audio/ogg",
            ContentType::AudioOpus => "audio/opus",
            ContentType::AudioWav => "audio/wav",
            ContentType::AudioWeba => "audio/webm",
            ContentType::ApplicationBz => "application/x-bzip",
            ContentType::ApplicationBz2 => "application/x-bzip2",
            ContentType::ApplicationDoc => "application/msword",
            ContentType::ApplicationDocx => {
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            }
            ContentType::ApplicationEpub => "application/epub+zip",
            ContentType::ApplicationGzip => "application/gzip",
            ContentType::ApplicationJar => "application/java-archive",
            ContentType::ApplicationJson => "application/json",
            ContentType::ApplicationOctetstream => "application/octetstream",
            ContentType::ApplicationOdp => "application/vnd.oasis.opendocument.presentation",
            ContentType::ApplicationOds => "application/vnd.oasis.opendocument.spreadsheet",
            ContentType::ApplicationOdt => "application/vnd.oasis.opendocument.text",
            ContentType::ApplicationPdf => "application/pdf",
            ContentType::ApplicationPhp => "application/x-httpd-php",
            ContentType::ApplicationPpt => "application/vnd.ms-powerpoint",
            ContentType::ApplicationPptx => {
                "application/vnd.openxmlformats-officedocument.presentationml.presentation"
            }
            ContentType::ApplicationRar => "application/vnd.rar",
            ContentType::ApplicationRtf => "application/rtf",
            ContentType::ApplicationSh => "application/x-sh",
            ContentType::ApplicationTar => "application/x-tar",
            ContentType::ApplicationXls => "application/vnd.ms-excel",
            ContentType::ApplicationXlsx => {
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            }
            ContentType::ApplicationXml => "application/xml",
            ContentType::ApplicationZip => "application/zip",
            ContentType::Application7zip => "application/x-7z-compressed",
            ContentType::FontOtf => "font/otf",
            ContentType::FontTtf => "font/ttf",
            ContentType::FontWoff => "font/woff",
            ContentType::FontWoff2 => "font/woff2",
            ContentType::ImageAvif => "image/avif",
            ContentType::ImageBmp => "image/bmp",
            ContentType::ImageGif => "image/gif",
            ContentType::ImageIco => "image/vnd.microsoft.icon",
            ContentType::ImageJpeg => "image/jpeg",
            ContentType::ImagePng => "image/png",
            ContentType::ImageSvg => "image/svg+xml",
            ContentType::ImageTiff => "image/tiff",
            ContentType::ImageWebp => "image/webp",
            ContentType::TextCalendar => "text/calendar",
            ContentType::TextCss => "text/css",
            ContentType::TextCsv => "text/csv",
            ContentType::TextHtml => "text/html",
            ContentType::TextJavascript => "text/javascript",
            ContentType::TextPlain => "text/plain",
            ContentType::VideoAvi => "video/x-msvideo",
            ContentType::VideoMp4 => "video/mp4",
            ContentType::VideoMpeg => "video/mpeg",
            ContentType::VideoOgv => "video/ogg",
            ContentType::VideoTransportStream => "video/mp2t",
            ContentType::VideoWebm => "video/webm",
        }
    }
}
